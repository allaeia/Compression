!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
D	td2.h	/^    std::vector<double> D;$/;"	l
HAAR_H	haar.h	2;"	d
Mat_	haar.h	/^    img.push_back(cv::Mat_<int>(rows_s_2,cols_s_2));$/;"	p	signature:(rows_s_2,cols_s_2)
Mat_	main.cpp	/^    img.push_back(cv::Mat_<U>(rowss2,colss2));$/;"	p	file:	signature:(rowss2,colss2)
R	td2.h	/^    std::vector<double> R;$/;"	l
TD2_H	td2.h	2;"	d
br	main.cpp	/^    cv::Mat_<uchar> br;$/;"	l
br2	main.cpp	/^    cv::Mat_<uchar> br2 = cv::Mat_<uchar>(rows,cols);$/;"	l
br_bord	main.cpp	/^    cv::Mat_<T> br_bord(rowsp1,colsp1);$/;"	p	file:	signature:(rowsp1,colsp1)
clear	haar.h	/^    img.clear();$/;"	p	signature:()
clear	main.cpp	/^    img.clear();$/;"	p	file:	signature:()
close	main.cpp	/^    ofs.close();$/;"	p	file:	signature:()
close	td2.h	/^    ofs.close();$/;"	p	signature:()
coller_image	main.cpp	/^void coller_image(cv::Mat_<S>& dst, const cv::Mat_<T>& src1,const cv::Mat_<T>& src2,const cv::Mat_<T>& src3,const cv::Mat_<T>& src4)$/;"	f	signature:(cv::Mat_<S>& dst, const cv::Mat_<T>& src1,const cv::Mat_<T>& src2,const cv::Mat_<T>& src3,const cv::Mat_<T>& src4)
cols	haar.h	/^    const int cols = br.cols;$/;"	l
cols	haar.h	/^    const int cols = br2.cols;$/;"	l
cols	main.cpp	/^    const int cols = br.cols;$/;"	l
cols	main.cpp	/^    const int cols = input.cols;$/;"	l
cols	main.cpp	/^    const int cols = src.cols;$/;"	l
cols	main.cpp	/^    const int cols = src1.cols;$/;"	l
cols	td2.h	/^    const int cols = I1.cols;$/;"	l
cols	td2.h	/^    const int cols = img.cols;$/;"	l
cols	td2.h	/^    const int cols = indice.cols;$/;"	l
cols	td2.h	/^    const int cols = src.cols;$/;"	l
cols	td2.h	/^    const int cols = src_0.cols;$/;"	l
cols_s_2	haar.h	/^    const int cols_s_2 = cols>>1;$/;"	l
cols_s_2	main.cpp	/^    const int cols_s_2 = cols>>1;$/;"	l
colsp1	main.cpp	/^    const int colsp1 = cols +1;$/;"	l
colss2	main.cpp	/^    const int colss2 = cols>>1;$/;"	l
colsx2	main.cpp	/^    const int colsx2 = cols<<1;$/;"	l
cv::cvtColor	main.cpp	/^    cv::cvtColor(input,br,CV_BGR2GRAY);$/;"	p	class:cv	file:	signature:(input,br,CV_BGR2GRAY)
cv::imwrite	main.cpp	/^        cv::imwrite(oss.str().c_str(),img_ensemble);$/;"	p	class:cv	file:	signature:(oss.str().c_str(),img_ensemble)
cv::imwrite	main.cpp	/^        cv::imwrite(oss.str().c_str(),img_ensemble_new);$/;"	p	class:cv	file:	signature:(oss.str().c_str(),img_ensemble_new)
cv::imwrite	main.cpp	/^        cv::imwrite(oss.str().c_str(),reconstruction);$/;"	p	class:cv	file:	signature:(oss.str().c_str(),reconstruction)
cv::waitKey	main.cpp	/^        cv::waitKey();$/;"	p	class:cv	file:	signature:()
cv::waitKey	main.cpp	/^    cv::waitKey();$/;"	p	class:cv	file:	signature:()
cvtColor	main.cpp	/^    cv::cvtColor(input,br,CV_BGR2GRAY);$/;"	p	class:cv	file:	signature:(input,br,CV_BGR2GRAY)
distorsion_f_de_L	td2.h	/^void distorsion_f_de_L(const cv::Mat_<T>& src, int min, int max)$/;"	f	signature:(const cv::Mat_<T>& src, int min, int max)
dst	td2.h	/^    cv::Mat_<T> dst = cv::Mat_<T>(src.rows,src.cols);$/;"	l
endl	main.cpp	/^        ofs << nb_classe << ";" << *ptr_entropy++ << ";" << *ptr_psnr++ << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^        std::cerr << "unable to load the image" << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^        std::cout << "entropy total: "<< entropy_total << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^        std::cout << "eqm total: "<< get_eqm(reconstruction,br) << std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^        std::cout << "psnr: " << get_psnr(reconstruction,br)<<std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^        std::cout << "taux compression: " << 1-entropy_total\/get_entropy(br)<<std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^        std::cout<<std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^    ofs << "L;entropy_total;PSNRdB"<<std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^    std::cout << get_entropy(br)<<std::endl;$/;"	m	class:std	file:
endl	main.cpp	/^    std::cout << get_entropy(img[img.size()-1][0])<<std::endl;$/;"	m	class:std	file:
endl	td2.h	/^                std::cout << L << " " << *(ptr_dst-1)<<" " << *(ptr_src-1)<<" " << min<<" " << max<<" " << (*(ptr_src-1)-min)*ratio<<std::endl;$/;"	m	class:std
endl	td2.h	/^        ofs << *ptr_R++ << ";" << *ptr_D++ << std::endl;$/;"	m	class:std
endl	td2.h	/^        ofs << t << "," << table_association[floor((t)*ratio+0.5)-indice_min] << std::endl;$/;"	m	class:std
endl	td2.h	/^        std::cerr << "vous devez avoir au moins une classe" << std::endl;$/;"	m	class:std
endl	td2.h	/^    ofs << "R"<< ";" << "D" << std::endl;$/;"	m	class:std
endl	td2.h	/^    std::cout << rows << " " << cols << std::endl;$/;"	m	class:std
endl	td2.h	/^    std::cout<<"azert"<<std::endl;$/;"	m	class:std
entropy	main.cpp	/^    std::vector<std::vector<double>> entropy(img.size());$/;"	p	file:	signature:(img.size())
entropy_total	main.cpp	/^    double entropy_total;$/;"	l
eqm	td2.h	/^    double eqm = 0;$/;"	l
filtre_bf_v	main.cpp	/^void filtre_bf_v(const cv::Mat_<T>& src, cv::Mat_<T>& dst)$/;"	f	signature:(const cv::Mat_<T>& src, cv::Mat_<T>& dst)
get_distorsion	td2.h	/^        D.push_back(get_distorsion(src,dst,table_association));$/;"	p	signature:(src,dst,table_association)
get_distorsion	td2.h	/^double get_distorsion(const cv::Mat_<T>& I1, const cv::Mat_<U>& indice, const std::vector<T>& table_association)$/;"	f	signature:(const cv::Mat_<T>& I1, const cv::Mat_<U>& indice, const std::vector<T>& table_association)
get_entropy	td2.h	/^double get_entropy(const cv::Mat_<T>& img)$/;"	f	signature:(const cv::Mat_<T>& img)
get_entropy	td2.h	/^double get_entropy(const cv::Mat_<U>& indice, const std::vector<T>& table_association)$/;"	f	signature:(const cv::Mat_<U>& indice, const std::vector<T>& table_association)
get_eqm	td2.h	/^double get_eqm(const cv::Mat_<U>& src_0, const cv::Mat_<T>& src_1)$/;"	f	signature:(const cv::Mat_<U>& src_0, const cv::Mat_<T>& src_1)
get_psnr	main.cpp	/^        psnr.push_back(get_psnr(reconstruction,br));$/;"	p	file:	signature:(reconstruction,br)
get_psnr	td2.h	/^inline double get_psnr(const cv::Mat_<U>& src_0, const cv::Mat_<T>& src_1)$/;"	f	signature:(const cv::Mat_<U>& src_0, const cv::Mat_<T>& src_1)
get_psnr	td2.h	/^inline double get_psnr(double eqm)$/;"	f	signature:(double eqm)
img0	main.cpp	/^    cv::Mat_<U> img0 = cv::Mat_<U>(rows,cols);$/;"	l
img1	main.cpp	/^    cv::Mat_<U> img1 = cv::Mat_<U>(rows,cols);$/;"	l
img2	main.cpp	/^    cv::Mat_<U> img2 = cv::Mat_<U>(rows,cols);$/;"	l
img3	main.cpp	/^    cv::Mat_<U> img3 = cv::Mat_<U>(rows,cols);$/;"	l
img_ensemble	main.cpp	/^    cv::Mat_<uchar> img_ensemble(rows,cols);$/;"	p	file:	signature:(rows,cols)
img_ensemble_new	main.cpp	/^    cv::Mat_<uchar> img_ensemble_new(rows,cols);$/;"	p	file:	signature:(rows,cols)
img_new	main.cpp	/^    std::vector<std::vector<cv::Mat_<int>>> img_new(img.size());$/;"	p	file:	signature:(img.size())
imwrite	main.cpp	/^        cv::imwrite(oss.str().c_str(),img_ensemble);$/;"	p	class:cv	file:	signature:(oss.str().c_str(),img_ensemble)
imwrite	main.cpp	/^        cv::imwrite(oss.str().c_str(),img_ensemble_new);$/;"	p	class:cv	file:	signature:(oss.str().c_str(),img_ensemble_new)
imwrite	main.cpp	/^        cv::imwrite(oss.str().c_str(),reconstruction);$/;"	p	class:cv	file:	signature:(oss.str().c_str(),reconstruction)
indice_min	td2.h	/^    int indice_min = floor(min*ratio+0.5);$/;"	l
input	main.cpp	/^    cv::Mat input = cv::imread("img\/lena.bmp",CV_LOAD_IMAGE_COLOR);$/;"	l
interval_length	td2.h	/^    const long double interval_length = double(max-min)\/L;$/;"	l
log2	td2.h	/^        R.push_back(log2(double(L)));$/;"	p	signature:(double(L))
main	main.cpp	/^int main()$/;"	f	signature:()
max	td2.h	/^    T max(min);$/;"	p	signature:(min)
min_val	main.cpp	/^    T min_val = max_val;$/;"	l
n_col	main.cpp	/^    const int n_col = mat.cols;$/;"	l
n_row	main.cpp	/^    const int n_row = mat.rows;$/;"	l
nb_classe	main.cpp	/^        oss << "img\/ensemble" << nb_classe << ".bmp";$/;"	l
nb_classe	main.cpp	/^        oss << "img\/reconstruction" << nb_classe << ".bmp";$/;"	l
nb_elem	td2.h	/^    std::vector<int> nb_elem(nb_elem_size,0);$/;"	p	signature:(nb_elem_size,0)
nb_elem	td2.h	/^    std::vector<int> nb_elem(size_table_assoc,0);$/;"	p	signature:(size_table_assoc,0)
nb_elem_size	td2.h	/^    const unsigned int nb_elem_size = (min<0?max-min:max);$/;"	l
normalized_gray_image	main.cpp	/^void normalized_gray_image(cv::Mat_<T>& mat, const double new_max)$/;"	f	signature:(cv::Mat_<T>& mat, const double new_max)
ofs	td2.h	/^    std::ofstream ofs;$/;"	l
ondelette_1	haar.h	/^void ondelette_1(const cv::Mat_<T>& br, std::vector<cv::Mat_<int>>& img)$/;"	f	signature:(const cv::Mat_<T>& br, std::vector<cv::Mat_<int>>& img)
ondelette_1_synthese	haar.h	/^void ondelette_1_synthese(const std::vector<cv::Mat_<int>>& img, cv::Mat_<T>& br2)$/;"	f	signature:(const std::vector<cv::Mat_<int>>& img, cv::Mat_<T>& br2)
ondelette_2	main.cpp	/^void ondelette_2(const cv::Mat_<T>& br, std::vector<cv::Mat_<U>>& img)$/;"	f	signature:(const cv::Mat_<T>& br, std::vector<cv::Mat_<U>>& img)
ondelette_2_synthese	main.cpp	/^void ondelette_2_synthese(const std::vector<cv::Mat_<U>>& img, cv::Mat_<T>& br2)$/;"	f	signature:(const std::vector<cv::Mat_<U>>& img, cv::Mat_<T>& br2)
oss	main.cpp	/^        std::ostringstream oss;$/;"	l
oss	main.cpp	/^    std::ostringstream oss;$/;"	l
pi	td2.h	/^    double pi;$/;"	l
psnr	main.cpp	/^    std::vector<double> psnr;$/;"	l
ptr	main.cpp	/^            T* ptr = mat[row];$/;"	l
ptr	main.cpp	/^        T* ptr = mat[row];$/;"	l
ptr11	haar.h	/^        T* ptr11 = br2[row_x2];$/;"	l
ptr11	haar.h	/^        const T* ptr11 = br[row_x2];$/;"	l
ptr11	main.cpp	/^        const T* ptr11 = br_bord[row - 1];$/;"	l
ptr12	haar.h	/^        T* ptr12 = ptr11+1;$/;"	l
ptr12	haar.h	/^        const T* ptr12 = ptr11+1;$/;"	l
ptr12	main.cpp	/^        const T* ptr12 = ptr11+1;$/;"	l
ptr21	haar.h	/^        T* ptr21 = br2[row_x2+1];$/;"	l
ptr21	haar.h	/^        const T* ptr21 = br[row_x2+1];$/;"	l
ptr21	main.cpp	/^        const T* ptr21 = br_bord[row];$/;"	l
ptr22	haar.h	/^        T* ptr22 = ptr21+1;$/;"	l
ptr22	haar.h	/^        const T* ptr22 = ptr21+1;$/;"	l
ptr22	main.cpp	/^        const T* ptr22 = ptr21+1;$/;"	l
ptr_0	td2.h	/^    const U* ptr_0 = src_0[0];$/;"	l
ptr_1	td2.h	/^    const T* ptr_1 = src_1[0];$/;"	l
ptr_D	td2.h	/^    double* ptr_D = D.data();$/;"	l
ptr_I1	td2.h	/^    const T* ptr_I1 = I1[0];$/;"	l
ptr_R	td2.h	/^    double* ptr_R = R.data();$/;"	l
ptr_dst	main.cpp	/^    T* ptr_dst = br_bord[0];$/;"	l
ptr_dst	main.cpp	/^    T* ptr_dst = dst[0];$/;"	l
ptr_dst	td2.h	/^    T* ptr_dst = dst[0];$/;"	l
ptr_dst	td2.h	/^    U* ptr_dst = dst[0];$/;"	l
ptr_dst0	main.cpp	/^    U* ptr_dst0 = img[0][0];$/;"	l
ptr_dst1	main.cpp	/^    U* ptr_dst1 = img[1][0];$/;"	l
ptr_dst2	main.cpp	/^    U* ptr_dst2 = img[2][0];$/;"	l
ptr_dst3	main.cpp	/^    U* ptr_dst3 = img[3][0];$/;"	l
ptr_entropy	main.cpp	/^    double* ptr_entropy = ventropy_total.data();$/;"	l
ptr_img0	haar.h	/^        const int* ptr_img0 = img[0][row];$/;"	l
ptr_img0	haar.h	/^        int* ptr_img0 = img[0][row];$/;"	l
ptr_img0	main.cpp	/^        const T* ptr_img0 = src1[row];$/;"	l
ptr_img0	main.cpp	/^    U* ptr_img0 = img0[0];$/;"	l
ptr_img1	haar.h	/^        const int* ptr_img1 = img[1][row];$/;"	l
ptr_img1	haar.h	/^        int* ptr_img1 = img[1][row];$/;"	l
ptr_img1	main.cpp	/^        const T* ptr_img1 = src2[row];$/;"	l
ptr_img1	main.cpp	/^    U* ptr_img1 = img1[0];$/;"	l
ptr_img2	haar.h	/^        const int* ptr_img2 = img[2][row];$/;"	l
ptr_img2	haar.h	/^        int* ptr_img2 = img[2][row];$/;"	l
ptr_img2	main.cpp	/^        const T* ptr_img2 = src3[row];$/;"	l
ptr_img2	main.cpp	/^    U* ptr_img2 = img2[0];$/;"	l
ptr_img3	haar.h	/^        const int* ptr_img3 = img[3][row];$/;"	l
ptr_img3	haar.h	/^        int* ptr_img3 = img[3][row];$/;"	l
ptr_img3	main.cpp	/^        const T* ptr_img3 = src4[row];$/;"	l
ptr_img3	main.cpp	/^    U* ptr_img3 = img3[0];$/;"	l
ptr_img_1	main.cpp	/^    S* ptr_img_1 = dst[0];$/;"	l
ptr_img_2	main.cpp	/^    S* ptr_img_2 = dst[rows];$/;"	l
ptr_indice	td2.h	/^    const T* ptr_indice = img[0];$/;"	l
ptr_indice	td2.h	/^    const U* ptr_indice = indice[0];$/;"	l
ptr_nb_elem	td2.h	/^    int* ptr_nb_elem = nb_elem.data();$/;"	l
ptr_psnr	main.cpp	/^    double* ptr_psnr = psnr.data();$/;"	l
ptr_src	main.cpp	/^        const T* ptr_src = src[row];$/;"	l
ptr_src	main.cpp	/^    const T* ptr_src;\/\/ = br[0];$/;"	l
ptr_src	td2.h	/^        const T* ptr_src = img[row];$/;"	l
ptr_src	td2.h	/^        const T* ptr_src = src[row];$/;"	l
ptr_src	td2.h	/^    const U* ptr_src = src[0];$/;"	l
ptr_tab	td2.h	/^    T* ptr_tab = table_association.data();$/;"	l
push_back	main.cpp	/^        ventropy_total.push_back(entropy_total);$/;"	p	file:	signature:(entropy_total)
quantif	main.cpp	/^    std::vector<std::vector<cv::Mat_<int>>> quantif(img.size());$/;"	p	file:	signature:(img.size())
quantificateur_scalaire_uniforme	td2.h	/^void quantificateur_scalaire_uniforme(const cv::Mat_<T>& src, cv::Mat_<U>& dst, std::vector<T>& table_association, int L)\/\/L:niveau de quantification$/;"	f	signature:(const cv::Mat_<T>& src, cv::Mat_<U>& dst, std::vector<T>& table_association, int L)
ratio	main.cpp	/^        long double ratio = new_max*1.0\/(max_val-min_val);$/;"	l
ratio	td2.h	/^    const long double ratio = double(L)\/(max-min);$/;"	l
reconstruction	main.cpp	/^    cv::Mat_<uchar> reconstruction = cv::Mat_<uchar>(rows,cols);$/;"	l
reconstruction_quantificateur_scalaire_uniforme	td2.h	/^void reconstruction_quantificateur_scalaire_uniforme(const cv::Mat_<U>& src, cv::Mat_<T>& dst, std::vector<T>& table_association)$/;"	f	signature:(const cv::Mat_<U>& src, cv::Mat_<T>& dst, std::vector<T>& table_association)
resize	main.cpp	/^            entropy[i].resize(img[i].size());$/;"	p	file:	signature:(img[i].size())
resize	main.cpp	/^            img_new[i].resize(img[i].size());$/;"	p	file:	signature:(img[i].size())
resize	main.cpp	/^            quantif[i].resize(img[i].size());$/;"	p	file:	signature:(img[i].size())
resize	main.cpp	/^            table_assoc[i].resize(img[i].size());$/;"	p	file:	signature:(img[i].size())
resize	td2.h	/^    table_association.resize(L);$/;"	p	signature:(L)
row_x2	haar.h	/^        const int row_x2 = row << 1;$/;"	l
row_x2	main.cpp	/^        const int row_x2 = row<<1;$/;"	l
row_x2p1	main.cpp	/^        const int row_x2p1 = row_x2+1;$/;"	l
rows	haar.h	/^    const int rows = br.rows;$/;"	l
rows	haar.h	/^    const int rows = br2.rows;$/;"	l
rows	main.cpp	/^    const int rows = br.rows;$/;"	l
rows	main.cpp	/^    const int rows = input.rows;$/;"	l
rows	main.cpp	/^    const int rows = src.rows;$/;"	l
rows	main.cpp	/^    const int rows = src1.rows;$/;"	l
rows	td2.h	/^    const int rows = I1.rows;$/;"	l
rows	td2.h	/^    const int rows = img.rows;$/;"	l
rows	td2.h	/^    const int rows = indice.rows;$/;"	l
rows	td2.h	/^    const int rows = src.rows;$/;"	l
rows	td2.h	/^    const int rows = src_0.rows;$/;"	l
rows_s_2	haar.h	/^    const int rows_s_2 = rows>>1;$/;"	l
rows_s_2	main.cpp	/^    const int rows_s_2 = rows>>1;$/;"	l
rowscols	main.cpp	/^    const int rowscols = rows*cols;$/;"	l
rowscols	td2.h	/^    const int rowscols = rows*cols;$/;"	l
rowsp1	main.cpp	/^    const int rowsp1 = rows +1;$/;"	l
rowss2	main.cpp	/^    const int rowss2 = rows>>1;$/;"	l
rowsx2	main.cpp	/^    const int rowsx2 = rows<<1;$/;"	l
size	main.cpp	/^    const int size = cols * sizeof(T);$/;"	l
size	td2.h	/^    const int size = R.size();$/;"	l
size_table_assoc	td2.h	/^    const int size_table_assoc = table_association.size();$/;"	l
std::endl	main.cpp	/^        ofs << nb_classe << ";" << *ptr_entropy++ << ";" << *ptr_psnr++ << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^        std::cerr << "unable to load the image" << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^        std::cout << "entropy total: "<< entropy_total << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^        std::cout << "eqm total: "<< get_eqm(reconstruction,br) << std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^        std::cout << "psnr: " << get_psnr(reconstruction,br)<<std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^        std::cout << "taux compression: " << 1-entropy_total\/get_entropy(br)<<std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^        std::cout<<std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^    ofs << "L;entropy_total;PSNRdB"<<std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^    std::cout << get_entropy(br)<<std::endl;$/;"	m	class:std	file:
std::endl	main.cpp	/^    std::cout << get_entropy(img[img.size()-1][0])<<std::endl;$/;"	m	class:std	file:
std::endl	td2.h	/^                std::cout << L << " " << *(ptr_dst-1)<<" " << *(ptr_src-1)<<" " << min<<" " << max<<" " << (*(ptr_src-1)-min)*ratio<<std::endl;$/;"	m	class:std
std::endl	td2.h	/^        ofs << *ptr_R++ << ";" << *ptr_D++ << std::endl;$/;"	m	class:std
std::endl	td2.h	/^        ofs << t << "," << table_association[floor((t)*ratio+0.5)-indice_min] << std::endl;$/;"	m	class:std
std::endl	td2.h	/^        std::cerr << "vous devez avoir au moins une classe" << std::endl;$/;"	m	class:std
std::endl	td2.h	/^    ofs << "R"<< ";" << "D" << std::endl;$/;"	m	class:std
std::endl	td2.h	/^    std::cout << rows << " " << cols << std::endl;$/;"	m	class:std
std::endl	td2.h	/^    std::cout<<"azert"<<std::endl;$/;"	m	class:std
sur_ech_h	main.cpp	/^void sur_ech_h(const cv::Mat_<T>& src, cv::Mat_<T>& dst)$/;"	f	signature:(const cv::Mat_<T>& src, cv::Mat_<T>& dst)
sur_ech_v	main.cpp	/^void sur_ech_v(const cv::Mat_<T>& src, cv::Mat_<T>& dst, bool hf)$/;"	f	signature:(const cv::Mat_<T>& src, cv::Mat_<T>& dst, bool hf)
table_assoc	main.cpp	/^    std::vector<std::vector<std::vector<int>>> table_assoc(img.size());$/;"	p	file:	signature:(img.size())
table_association	td2.h	/^    std::vector<T> table_association;$/;"	l
un_sur_rowscols	td2.h	/^    const double un_sur_rowscols = 1.0\/rowscols;$/;"	l
val	td2.h	/^            T val = *ptr_src++;$/;"	l
val11	haar.h	/^            const int val11 = *ptr11;$/;"	l
val11	haar.h	/^            const int val11 = *ptr_img0++;$/;"	l
val11	main.cpp	/^            const U val11 = *ptr11;$/;"	l
val12	haar.h	/^            const int val12 = *ptr12;$/;"	l
val12	haar.h	/^            const int val12 = *ptr_img1++;$/;"	l
val12	main.cpp	/^            const U val12 = *ptr12;$/;"	l
val21	haar.h	/^            const int val21 = *ptr21;$/;"	l
val21	haar.h	/^            const int val21 = *ptr_img2++;$/;"	l
val21	main.cpp	/^            const U val21 = *ptr21;$/;"	l
val22	haar.h	/^            const int val22 = *ptr22;$/;"	l
val22	haar.h	/^            const int val22 = *ptr_img3++;$/;"	l
val22	main.cpp	/^            const U val22 = *ptr22;$/;"	l
ventropy_total	main.cpp	/^    std::vector<double> ventropy_total;$/;"	l
waitKey	main.cpp	/^        cv::waitKey();$/;"	p	class:cv	file:	signature:()
waitKey	main.cpp	/^    cv::waitKey();$/;"	p	class:cv	file:	signature:()
